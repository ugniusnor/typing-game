{"version":3,"sources":["hooks/useWordGame.js","components/buttons/Button.jsx","components/startPopUp/StartPopUp.jsx","App.js","index.js"],"names":["useWordGame","STARTING_TIME","useState","input","setInput","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","textBoxRef","useRef","a","current","focus","useEffect","setTimeout","time","text","trim","split","filter","word","length","endGame","handleInput","e","value","target","startClock","Button","onClickFn","isDisabled","data-testid","disabled","onClick","StartPopUp","stateFn","playTime","playTimeInput","initPlayTime","isInputRight","setIsInputRight","handleSumbit","test","parseInt","checkInput","className","style","display","htmlFor","id","name","onChange","App","setPlayTime","setPlayTimeInput","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.971c2ee6.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nfunction useWordGame(STARTING_TIME) {\n  const [input, setInput] = useState(\"\");\n  const [timeRemaining, setTimeRemaining] = useState(STARTING_TIME);\n  const [isTimeRunning, setIsTimeRunning] = useState(false);\n  const [wordCount, setWordCount] = useState(0);\n  const textBoxRef = useRef(null);\n\n  const handleInput = (e) => {\n    const { value } = e.target;\n    setInput(value);\n  };\n\n  useEffect(() => {\n    if (isTimeRunning && timeRemaining > 0) {\n      setTimeout(() => {\n        setTimeRemaining((time) => time - 1);\n      }, 1000);\n    } else if (timeRemaining === 0) {\n      endGame();\n    }\n  }, [timeRemaining, isTimeRunning, STARTING_TIME]);\n\n  function calculateWordCount(text) {\n    const wordsArr = text\n      .trim()\n      .split(\" \")\n      .filter((word) => word !== \"\").length;\n\n    return wordsArr;\n  }\n\n  async function startClock() {\n    await setIsTimeRunning(true);\n    setTimeRemaining(STARTING_TIME);\n    setInput(\"\");\n\n    textBoxRef.current.focus();\n  }\n\n  function endGame() {\n    setIsTimeRunning(false);\n    setWordCount(calculateWordCount(input));\n  }\n\n  return {\n    textBoxRef,\n    handleInput,\n    input,\n    isTimeRunning,\n    timeRemaining,\n    wordCount,\n    startClock,\n  };\n}\nexport default useWordGame;\n","import React from \"react\";\n\nexport default function Button({ onClickFn, text, isDisabled = false }) {\n  return (\n    <button data-testid=\"button\" disabled={isDisabled} onClick={onClickFn}>\n      {text}\n    </button>\n  );\n}\n","import React, { useState } from \"react\";\nimport Button from \"../buttons/Button\";\nexport default function StartPopUp({\n  stateFn,\n  playTime,\n  playTimeInput,\n  initPlayTime,\n}) {\n  const checkInput = (input) => {\n    const re = /^[1-9][0-9]*$/;\n    if (re.test(input) && parseInt(input) < 60 && input.length > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  const [isInputRight, setIsInputRight] = useState(true);\n\n  const handleSumbit = (input) => {\n    if (checkInput(input)) {\n      initPlayTime(input);\n    } else {\n      setIsInputRight(false);\n    }\n  };\n\n  return (\n    <div className=\"pop_up\" style={{ display: !playTime ? \"block\" : \"none\" }}>\n      <label htmlFor=\"play_time_input\">Set playing time</label>\n      <input\n        data-testid=\"pop_up_input\"\n        id=\"play_time_input\"\n        name=\"play_time_input\"\n        value={playTimeInput}\n        onChange={(e) => {\n          stateFn(e.target.value);\n        }}\n      />\n      <Button\n        text={\"OK\"}\n        onClickFn={() => {\n          handleSumbit(playTimeInput);\n        }}\n      />\n      {!isInputRight && (\n        <small className=\"err_msg\">\n          Sorry, wrong input <br />\n        </small>\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport useWordGame from \"./hooks/useWordGame\";\nimport StartPopUp from \"./components/startPopUp/StartPopUp\";\nimport Button from \"./components/buttons/Button\";\nfunction App() {\n  const [playTime, setPlayTime] = useState(false);\n  const [playTimeInput, setPlayTimeInput] = useState(\"\");\n  const initPlayTime = () => {\n    setPlayTime(playTimeInput);\n  };\n  const {\n    textBoxRef,\n    handleInput,\n    input,\n    isTimeRunning,\n    timeRemaining,\n    wordCount,\n    startClock,\n  } = useWordGame(playTime);\n\n  return (\n    <div className=\"App\">\n      <StartPopUp\n        stateFn={setPlayTimeInput}\n        playTimeInput={playTimeInput}\n        playTime={playTime}\n        initPlayTime={initPlayTime}\n      />\n      {playTime && (\n        <div>\n          <h1>React typing game</h1>\n          <textarea\n            data-testid=\"game_input_field\"\n            ref={textBoxRef}\n            onChange={(e) => handleInput(e)}\n            value={input}\n            disabled={!isTimeRunning}\n          />\n          <h4>Time remaining:{timeRemaining}</h4>\n\n          <Button\n            onClickFn={startClock}\n            text={timeRemaining !== 0 ? \"Start\" : \"Restart\"}\n            isDisabled={isTimeRunning}\n          />\n          <h1> Word Count:{wordCount}</h1>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}